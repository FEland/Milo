{"version":3,"file":"colorutils.js","sources":["../src/colorutils.js"],"sourcesContent":["/* eslint-disable no-bitwise */\n\n/**\n * @typedef {Object} Rgb\n * @property {number} red - The red component of the color (0 - 255)\n * @property {number} green - The green component of the color (0 - 255)\n * @property {number} blue - The blue component of the color (0 - 255)\n */\n\n/**\n * @typedef {Object} Hsv\n * @property {number} hue - The hue of the color (0 - 360)\n * @property {number} saturation - The saturation the color (0.0 - 1.0)\n * @property {number} value - The value of the color (0.0 - 1.0)\n */\n\n\n/**\n * Removes invalid characters and formats color hex to 6 characters\n * @param {string} colorHex The color value in hex format to sanitize\n */\nexport function sanitizeHex(colorHex) {\n  let sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\n\n  if (sanitizedHex.length === 0) {\n    sanitizedHex = '000000';\n  } else if (sanitizedHex.length === 1) {\n    sanitizedHex = sanitizedHex[0].repeat(6);\n  } else if (sanitizedHex.length === 2) {\n    sanitizedHex = `${sanitizedHex[0].repeat(3)}${sanitizedHex[1].repeat(3)}`;\n  } else if (sanitizedHex.length >= 3 && sanitizedHex.length < 6) {\n    sanitizedHex = `${sanitizedHex[0].repeat(2)}${sanitizedHex[1].repeat(2)}${sanitizedHex[2].repeat(2)}`;\n  } else if (sanitizedHex.length > 6) {\n    sanitizedHex = sanitizedHex.substr(0, 6);\n  }\n\n  return `#${sanitizedHex}`;\n}\n\n/**\n * Converts a hex color string to its red, green, and blue component values\n * @param {string} colorHex The color value in hex format\n * @returns {Rgb} The RGB values for the color\n */\nexport function hexToRgb(colorHex) {\n  let sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\n\n  if (sanitizedHex.length !== 6 && sanitizedHex.length !== 3) {\n    throw new Error(`Color should be either 3 or 6 characters in length - received a length of ${sanitizedHex.length}`);\n  }\n\n  if (sanitizedHex.length === 3) {\n    sanitizedHex = `${sanitizedHex[0].repeat(2)}${sanitizedHex[1].repeat(2)}${sanitizedHex[2].repeat(2)}`;\n  }\n\n  const rgb = parseInt(sanitizedHex, 16);\n\n  if (Number.isNaN(rgb)) {\n    throw new Error(`Unable to parse hex color ${colorHex}`);\n  }\n\n  const red = (rgb >> 16) & 0xff;\n  const green = (rgb >> 8) & 0xff;\n  const blue = (rgb) & 0xff;\n\n  return {\n    red,\n    green,\n    blue,\n  };\n}\n\n/**\n * Takes given hue, saturation and value and returns the respective RGB values\n * @param {number} hue The hue of the color (0.0 - 1.0)\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\n * @param {number} value The value of the color (0.0 - 1.0)\n * @returns {Rgb} The RGB values for the color\n */\nexport function hsvToRgb(hue, saturation, value) {\n  // Bounds check\n  if ((hue < 0 || hue > 360)\n      || (saturation < 0 || saturation > 1)\n      || (value < 0 || value > 1)) {\n    throw new Error('Invalid hue, saturation, or value - all values must be between 0 and 1');\n  }\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  const huePercent = hue / 360;\n  const i = Math.floor(huePercent * 6);\n  const f = huePercent * 6 - i;\n  const p = value * (1 - saturation);\n  const q = value * (1 - f * saturation);\n  const t = value * (1 - (1 - f) * saturation);\n\n  switch (i % 6) {\n    case 0: {\n      red = value;\n      green = t;\n      blue = p;\n      break;\n    }\n    case 1: {\n      red = q;\n      green = value;\n      blue = p;\n      break;\n    }\n    case 2: {\n      red = p;\n      green = value;\n      blue = t;\n      break;\n    }\n    case 3: {\n      red = p;\n      green = q;\n      blue = value;\n      break;\n    }\n    case 4: {\n      red = t;\n      green = p;\n      blue = value;\n      break;\n    }\n    case 5: {\n      red = value;\n      green = p;\n      blue = q;\n      break;\n    }\n    default: {\n      // Shouldn't reach here - break\n      break;\n    }\n  }\n\n  red = Math.round(red * 255);\n  green = Math.round(green * 255);\n  blue = Math.round(blue * 255);\n\n  return {\n    red,\n    green,\n    blue,\n  };\n}\n\n/**\n * Converts a hex color string to its hue, saturation, and value\n * @param {string} colorHex The color value in hex format\n * @returns {Hsv} The HSV values for the color\n */\nexport function hexToHsv(colorHex) {\n  // Hex validation handled by hexToRgb\n  const {\n    red,\n    green,\n    blue,\n  } = hexToRgb(colorHex);\n\n  const redPercent = red / 255;\n  const greenPercent = green / 255;\n  const bluePercent = blue / 255;\n\n  const max = Math.max(redPercent, greenPercent, bluePercent);\n  const min = Math.min(redPercent, greenPercent, bluePercent);\n  const diff = max - min;\n\n  let hue = 0;\n  const saturation = (max === 0) ? 0 : diff / max;\n  const value = max;\n\n  if (min === max) {\n    // Achromatic - no color\n  } else {\n    switch (max) {\n      case redPercent: {\n        hue = (greenPercent - bluePercent) / diff + (greenPercent < bluePercent ? 6 : 0);\n        break;\n      }\n      case greenPercent: {\n        hue = (bluePercent - redPercent) / diff + 2;\n        break;\n      }\n      case bluePercent: {\n        hue = (redPercent - greenPercent) / diff + 4;\n        break;\n      }\n      default: {\n        // Shouldn't reach here - break\n        break;\n      }\n    }\n\n    hue /= 6;\n    hue *= 360;\n  }\n\n  return {\n    hue,\n    saturation,\n    value,\n  };\n}\n\n\n/**\n * Takes given red, green, and blue values and returns the hex color representation\n * @param {number} red The red component of the color (0 - 255)\n * @param {number} green The green component of the color (0 - 255)\n * @param {number} blue The blue component of the color (0 - 255)\n * @returns {string} The hex string representation of the color\n */\nexport function rgbToHex(red, green, blue) {\n  const rgb = blue | (green << 8) | (red << 16);\n\n  return `#${(0x1000000 + rgb).toString(16).slice(1)}`;\n}\n\n/**\n * Takes given hue, saturation and value and returns the hex color representation\n * @param {number} hue The hue of the color (0.0 - 1.0)\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\n * @param {number} value The value of the color (0.0 - 1.0)\n * @returns {string} The hex string representation of the color\n */\nexport function hsvToHex(hue, saturation, value) {\n  // Bounds check handled by hsvToRgb\n  const {\n    red,\n    green,\n    blue,\n  } = hsvToRgb(hue, saturation, value);\n\n  return rgbToHex(red, green, blue);\n}\n\n\n/**\n * Get the perceived brightness of a given color\n * See: https://www.w3.org/TR/AERT/#color-contrast\n * @param {number} red The red component of the color (0 - 255)\n * @param {number} green The green component of the color (0 - 255)\n * @param {number} blue The blue component of the color (0 - 255)\n * @returns {number} The perceived brightness of the color (0.0 - 1.0)\n */\nexport function getPerceivedLuminance(red, green, blue) {\n  return ((red * 0.299) + (green * 0.587) + (blue * 0.114)) / 255;\n}\n"],"names":["sanitizeHex","colorHex","sanitizedHex","replace","length","repeat","substr","hexToRgb","Error","rgb","parseInt","Number","isNaN","red","green","blue","hsvToRgb","hue","saturation","value","huePercent","i","Math","floor","f","p","q","t","round","hexToHsv","redPercent","greenPercent","bluePercent","max","min","diff","rgbToHex","toString","slice","hsvToHex","getPerceivedLuminance"],"mappings":"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"}