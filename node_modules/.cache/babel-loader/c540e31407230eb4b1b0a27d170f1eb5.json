{"ast":null,"code":"import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/* eslint-disable no-bitwise */\n\n/**\n * @typedef {Object} Rgb\n * @property {number} red - The red component of the color (0 - 255)\n * @property {number} green - The green component of the color (0 - 255)\n * @property {number} blue - The blue component of the color (0 - 255)\n */\n\n/**\n * @typedef {Object} Hsv\n * @property {number} hue - The hue of the color (0 - 360)\n * @property {number} saturation - The saturation the color (0.0 - 1.0)\n * @property {number} value - The value of the color (0.0 - 1.0)\n */\n\n/**\n * Removes invalid characters and formats color hex to 6 characters\n * @param {string} colorHex The color value in hex format to sanitize\n */\n\n\nfunction sanitizeHex(colorHex) {\n  var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\n\n  if (sanitizedHex.length === 0) {\n    sanitizedHex = '000000';\n  } else if (sanitizedHex.length === 1) {\n    sanitizedHex = sanitizedHex[0].repeat(6);\n  } else if (sanitizedHex.length === 2) {\n    sanitizedHex = \"\".concat(sanitizedHex[0].repeat(3)).concat(sanitizedHex[1].repeat(3));\n  } else if (sanitizedHex.length >= 3 && sanitizedHex.length < 6) {\n    sanitizedHex = \"\".concat(sanitizedHex[0].repeat(2)).concat(sanitizedHex[1].repeat(2)).concat(sanitizedHex[2].repeat(2));\n  } else if (sanitizedHex.length > 6) {\n    sanitizedHex = sanitizedHex.substr(0, 6);\n  }\n\n  return \"#\".concat(sanitizedHex);\n}\n/**\n * Converts a hex color string to its red, green, and blue component values\n * @param {string} colorHex The color value in hex format\n * @returns {Rgb} The RGB values for the color\n */\n\n\nfunction hexToRgb(colorHex) {\n  var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\n\n  if (sanitizedHex.length !== 6 && sanitizedHex.length !== 3) {\n    throw new Error(\"Color should be either 3 or 6 characters in length - received a length of \".concat(sanitizedHex.length));\n  }\n\n  if (sanitizedHex.length === 3) {\n    sanitizedHex = \"\".concat(sanitizedHex[0].repeat(2)).concat(sanitizedHex[1].repeat(2)).concat(sanitizedHex[2].repeat(2));\n  }\n\n  var rgb = parseInt(sanitizedHex, 16);\n\n  if (Number.isNaN(rgb)) {\n    throw new Error(\"Unable to parse hex color \".concat(colorHex));\n  }\n\n  var red = rgb >> 16 & 0xff;\n  var green = rgb >> 8 & 0xff;\n  var blue = rgb & 0xff;\n  return {\n    red: red,\n    green: green,\n    blue: blue\n  };\n}\n/**\n * Takes given hue, saturation and value and returns the respective RGB values\n * @param {number} hue The hue of the color (0.0 - 1.0)\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\n * @param {number} value The value of the color (0.0 - 1.0)\n * @returns {Rgb} The RGB values for the color\n */\n\n\nfunction hsvToRgb(hue, saturation, value) {\n  // Bounds check\n  if (hue < 0 || hue > 360 || saturation < 0 || saturation > 1 || value < 0 || value > 1) {\n    throw new Error('Invalid hue, saturation, or value - all values must be between 0 and 1');\n  }\n\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  var huePercent = hue / 360;\n  var i = Math.floor(huePercent * 6);\n  var f = huePercent * 6 - i;\n  var p = value * (1 - saturation);\n  var q = value * (1 - f * saturation);\n  var t = value * (1 - (1 - f) * saturation);\n\n  switch (i % 6) {\n    case 0:\n      {\n        red = value;\n        green = t;\n        blue = p;\n        break;\n      }\n\n    case 1:\n      {\n        red = q;\n        green = value;\n        blue = p;\n        break;\n      }\n\n    case 2:\n      {\n        red = p;\n        green = value;\n        blue = t;\n        break;\n      }\n\n    case 3:\n      {\n        red = p;\n        green = q;\n        blue = value;\n        break;\n      }\n\n    case 4:\n      {\n        red = t;\n        green = p;\n        blue = value;\n        break;\n      }\n\n    case 5:\n      {\n        red = value;\n        green = p;\n        blue = q;\n        break;\n      }\n  }\n\n  red = Math.round(red * 255);\n  green = Math.round(green * 255);\n  blue = Math.round(blue * 255);\n  return {\n    red: red,\n    green: green,\n    blue: blue\n  };\n}\n/**\n * Converts a hex color string to its hue, saturation, and value\n * @param {string} colorHex The color value in hex format\n * @returns {Hsv} The HSV values for the color\n */\n\n\nfunction hexToHsv(colorHex) {\n  // Hex validation handled by hexToRgb\n  var _hexToRgb = hexToRgb(colorHex),\n      red = _hexToRgb.red,\n      green = _hexToRgb.green,\n      blue = _hexToRgb.blue;\n\n  var redPercent = red / 255;\n  var greenPercent = green / 255;\n  var bluePercent = blue / 255;\n  var max = Math.max(redPercent, greenPercent, bluePercent);\n  var min = Math.min(redPercent, greenPercent, bluePercent);\n  var diff = max - min;\n  var hue = 0;\n  var saturation = max === 0 ? 0 : diff / max;\n  var value = max;\n  if (min === max) ;else {\n    switch (max) {\n      case redPercent:\n        {\n          hue = (greenPercent - bluePercent) / diff + (greenPercent < bluePercent ? 6 : 0);\n          break;\n        }\n\n      case greenPercent:\n        {\n          hue = (bluePercent - redPercent) / diff + 2;\n          break;\n        }\n\n      case bluePercent:\n        {\n          hue = (redPercent - greenPercent) / diff + 4;\n          break;\n        }\n    }\n\n    hue /= 6;\n    hue *= 360;\n  }\n  return {\n    hue: hue,\n    saturation: saturation,\n    value: value\n  };\n}\n/**\n * Takes given red, green, and blue values and returns the hex color representation\n * @param {number} red The red component of the color (0 - 255)\n * @param {number} green The green component of the color (0 - 255)\n * @param {number} blue The blue component of the color (0 - 255)\n * @returns {string} The hex string representation of the color\n */\n\n\nfunction rgbToHex(red, green, blue) {\n  var rgb = blue | green << 8 | red << 16;\n  return \"#\".concat((0x1000000 + rgb).toString(16).slice(1));\n}\n/**\n * Takes given hue, saturation and value and returns the hex color representation\n * @param {number} hue The hue of the color (0.0 - 1.0)\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\n * @param {number} value The value of the color (0.0 - 1.0)\n * @returns {string} The hex string representation of the color\n */\n\n\nfunction hsvToHex(hue, saturation, value) {\n  // Bounds check handled by hsvToRgb\n  var _hsvToRgb = hsvToRgb(hue, saturation, value),\n      red = _hsvToRgb.red,\n      green = _hsvToRgb.green,\n      blue = _hsvToRgb.blue;\n\n  return rgbToHex(red, green, blue);\n}\n/**\n * @typedef {Object} Event\n * @property {Object} target The target element of the event\n */\n\n/**\n * @typedef {Object} Element\n * @property {number} offsetLeft The left offset of the element\n * @property {number} offsetTop The top offset of the element\n * @property {Element} offsetParent The parent element the offset is relative to\n * @property {Element} parentElement The parent element\n */\n\n/**\n * Check's if a referenced element is the target or parent of the target of an event\n * @param {Event} target The interaction event\n * @param {Object} ref A ref from a react useRef hook (object with a .current property)\n */\n\n\nfunction isRefTargeted(evt, ref) {\n  // Missing ref or event/target\n  if (!ref || !ref.current || !evt || !evt.target) {\n    return false;\n  }\n\n  var currentTarget = evt.target;\n\n  do {\n    if (currentTarget === ref.current) {\n      return true;\n    }\n\n    currentTarget = currentTarget.parentElement;\n  } while (currentTarget);\n\n  return false;\n}\n/**\n * Gets the page relative top/left position of an element\n * @param {Element} element The DOM element to get the page position of\n */\n\n\nfunction getPagePosition(element) {\n  var left = element.offsetLeft;\n  var top = element.offsetTop;\n  var currentElement = element;\n\n  while (currentElement.offsetParent) {\n    currentElement = currentElement.offsetParent;\n    left += currentElement.offsetLeft;\n    top += currentElement.offsetTop;\n  }\n\n  return {\n    left: left,\n    top: top\n  };\n}\n/**\n * Get the hue value from a given position on the hue slider\n * @param {number} x The x coordinate on the hue slider\n * @param {number} width The width of the hue slider\n */\n\n\nfunction getHueFromPosition(x, width) {\n  if (!width) {\n    return 0;\n  }\n\n  var percentage = x / width;\n  var hue = Math.max(Math.min(percentage, 1), 0) * 360;\n  return hue;\n}\n/**\n * Get the saturation and value from a given position on the SV slider\n * @param {number} x The x coordinate on the SV selector\n * @param {number} y The y coordinate on the SV selector\n * @param {number} width The width of the SV selector\n * @param {number} height The height of the SV selector\n */\n\n\nfunction getSaturationValueFromPosition(x, y, width, height) {\n  var percentageX = !width ? 0 : x / width;\n  var percentageY = !height ? 0 : 1 - y / height;\n  var saturation = Math.max(Math.min(percentageX, 1), 0);\n  var value = Math.max(Math.min(percentageY, 1), 0);\n  return {\n    saturation: saturation,\n    value: value\n  };\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \".ReactColorPicker-module_react_color_picker__1OEfS {\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  height: 100%;\\n  box-sizing: border-box;\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_saturation_value__2AtC0 {\\n  position: relative;\\n  flex: 1 1 auto;\\n  overflow: hidden;\\n  margin-left: 11px;\\n  margin-right: 11px;\\n  margin-bottom: 10px;\\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, #000000 100%), linear-gradient(to left, rgba(255, 255, 255, 0) 0%, #ffffff 100%);\\n  background-color: #ffffff;\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_saturation_value__2AtC0 .ReactColorPicker-module_saturation_value_picker__3aPab {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 28px;\\n  height: 28px;\\n  box-sizing: border-box;\\n  border: 2px solid #ffffff;\\n  box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.5);\\n  border-radius: 14px;\\n  cursor: pointer;\\n  transform: translate(-50%, -50%);\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_hue_slider__1F8B5 {\\n  position: relative;\\n  height: 28px;\\n  margin-left: 11px;\\n  margin-right: 11px;\\n  margin-bottom: 2px;\\n  background-image: linear-gradient(to left, #ff0000 0%, #ff00ff 16.66%, #0000ff 33.33%, #00ffff 50%, #00ff00 66.66%, #ffff00 80.33%, #ff0000 100%);\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_hue_slider__1F8B5 .ReactColorPicker-module_hue_slider_picker__1bPFZ {\\n  position: absolute;\\n  top: -2px;\\n  left: 0;\\n  width: 18px;\\n  height: 100%;\\n  border: 2px solid #ffffff;\\n  box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.5);\\n  background-color: #ff0000;\\n  border-radius: 11px;\\n  cursor: pointer;\\n  transform: translateX(-50%);\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_details__106p_ {\\n  display: flex;\\n  align-items: center;\\n  margin-top: 10px;\\n  margin-left: 11px;\\n  margin-right: 11px;\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_details__106p_ .ReactColorPicker-module_swatch__3kHFV {\\n  width: 32px;\\n  height: 32px;\\n  margin-right: 10px;\\n  border: 1px solid #ccc;\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_details__106p_ .ReactColorPicker-module_hex_value__10kKY {\\n  width: 60px;\\n  margin-left: 5px;\\n}\";\nvar styles = {\n  \"react_color_picker\": \"ReactColorPicker-module_react_color_picker__1OEfS\",\n  \"saturation_value\": \"ReactColorPicker-module_saturation_value__2AtC0\",\n  \"saturation_value_picker\": \"ReactColorPicker-module_saturation_value_picker__3aPab\",\n  \"hue_slider\": \"ReactColorPicker-module_hue_slider__1F8B5\",\n  \"hue_slider_picker\": \"ReactColorPicker-module_hue_slider_picker__1bPFZ\",\n  \"details\": \"ReactColorPicker-module_details__106p_\",\n  \"swatch\": \"ReactColorPicker-module_swatch__3kHFV\",\n  \"hex_value\": \"ReactColorPicker-module_hex_value__10kKY\"\n};\nstyleInject(css_248z);\n\nvar ReactColorPicker = function ReactColorPicker(_ref) {\n  var className = _ref.className,\n      color = _ref.color,\n      showHex = _ref.showHex,\n      showSwatch = _ref.showSwatch,\n      onChange = _ref.onChange,\n      onInteractionStart = _ref.onInteractionStart,\n      onInteractionEnd = _ref.onInteractionEnd,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"color\", \"showHex\", \"showSwatch\", \"onChange\", \"onInteractionStart\", \"onInteractionEnd\"]);\n\n  var sanitizedColor = sanitizeHex(color || '#000000');\n\n  var _useState = useState(sanitizedColor),\n      _useState2 = _slicedToArray(_useState, 2),\n      hex = _useState2[0],\n      setHex = _useState2[1];\n\n  var _useState3 = useState(hexToHsv(sanitizedColor)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hsv = _useState4[0],\n      setHsv = _useState4[1]; // Used when editing the hex through the input\n\n\n  var _useState5 = useState(hex),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tempHex = _useState6[0],\n      setTempHex = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isInteracting = _useState8[0],\n      setIsInteracting = _useState8[1];\n\n  var hsvRef = useRef(hsv);\n  var hexRef = useRef(hex);\n  var hueSliderRef = useRef();\n  var svSliderRef = useRef(); // Set the hex and hsv states/refs with updated data\n\n  var setColor = function setColor(updatedHex, updatedHsv) {\n    hexRef.current = updatedHex;\n    hsvRef.current = updatedHsv;\n    setHex(updatedHex);\n    setTempHex(updatedHex);\n    setHsv(updatedHsv);\n    onChange(updatedHex);\n  }; // Helper to set the color when HSV change\n\n\n  var setColorFromHsv = function setColorFromHsv(updatedHsv) {\n    setColor(hsvToHex(updatedHsv.hue, updatedHsv.saturation, updatedHsv.value), updatedHsv);\n  }; // Helper to set the color when hex changes\n\n\n  var setColorFromHex = function setColorFromHex(updatedHex) {\n    setColor(updatedHex, hexToHsv(updatedHex));\n  }; // Event handler for hex input changes (on blur and enter pressed)\n\n\n  var onHexChange = function onHexChange(value) {\n    // Strip out invalid characters\n    var sanitizedHex = sanitizeHex(value);\n    setColorFromHex(sanitizedHex);\n  }; // Update color when the passed value changes\n\n\n  useEffect(function () {\n    if (color !== hexRef.current) {\n      var sanitizedHex = sanitizeHex(color || '#000000');\n      setColorFromHex(sanitizedHex);\n    }\n  }, [color]); // Hookup cursor events to update the color selection\n\n  useEffect(function () {\n    var updateColor = function updateColor(evt) {\n      // Update hue if targeted\n      if (isRefTargeted(evt, hueSliderRef) && evt.buttons === 1) {\n        var huePosition = getPagePosition(hueSliderRef.current);\n        var x = evt.pageX - huePosition.left;\n        var updatedHue = getHueFromPosition(x, hueSliderRef.current.clientWidth);\n        setColorFromHsv(_objectSpread2(_objectSpread2({}, hsvRef.current), {}, {\n          hue: updatedHue\n        }));\n      } // Update the saturation/value if targeted\n\n\n      if (isRefTargeted(evt, svSliderRef) && evt.buttons === 1) {\n        var svPosition = getPagePosition(svSliderRef.current);\n\n        var _x = evt.pageX - svPosition.left;\n\n        var y = evt.pageY - svPosition.top;\n        var updatedSaturationValue = getSaturationValueFromPosition(_x, y, svSliderRef.current.clientWidth, svSliderRef.current.clientHeight);\n        setColorFromHsv(_objectSpread2(_objectSpread2({}, hsvRef.current), updatedSaturationValue));\n      }\n    };\n\n    var onMouseDown = function onMouseDown(evt) {\n      if (isRefTargeted(evt, hueSliderRef) || isRefTargeted(evt, svSliderRef)) {\n        setIsInteracting(true);\n        onInteractionStart();\n        updateColor(evt);\n      }\n    };\n\n    var onMouseUp = function onMouseUp() {\n      if (isInteracting) {\n        setIsInteracting(false);\n        onInteractionEnd();\n      }\n    };\n\n    document.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mousemove', updateColor);\n    document.addEventListener('mouseup', onMouseUp);\n    return function () {\n      document.removeEventListener('mousedown', onMouseDown);\n      document.removeEventListener('mousemove', updateColor);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [isInteracting]);\n  var hue = hsv.hue,\n      saturation = hsv.saturation,\n      value = hsv.value; // Get the hex for the hue slider\n\n  var hueColor = hsvToHex(hue, 1, 1);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: \"\".concat(styles.react_color_picker).concat(className ? \" \".concat(className) : '')\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.saturation_value,\n    style: {\n      backgroundColor: hueColor\n    },\n    ref: svSliderRef,\n    title: \"Saturation and Value\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.saturation_value_picker,\n    style: {\n      left: \"\".concat(saturation * 100, \"%\"),\n      top: \"\".concat((1 - value) * 100, \"%\"),\n      backgroundColor: hex\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.hue_slider,\n    ref: hueSliderRef,\n    title: \"Hue\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.hue_slider_picker,\n    style: {\n      left: \"\".concat(hue / 360 * 100, \"%\"),\n      backgroundColor: hueColor\n    }\n  })), (showHex || showSwatch) && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.details\n  }, showSwatch && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.swatch,\n    style: {\n      backgroundColor: hex\n    },\n    title: \"Swatch\"\n  }), showHex && /*#__PURE__*/React.createElement(\"label\", null, /*#__PURE__*/React.createElement(\"span\", null, \"Hex:\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: styles.hex_value,\n    value: tempHex,\n    onChange: function onChange(evt) {\n      return setTempHex(evt.target.value);\n    },\n    onBlur: function onBlur(evt) {\n      return onHexChange(evt.target.value);\n    },\n    onKeyDown: function onKeyDown(evt) {\n      if (evt.key === 'Enter') {\n        onHexChange(evt.target.value);\n      } else if (evt.key === 'Esc' || evt.key === 'Escape') {\n        // eslint-disable-next-line no-param-reassign\n        evt.target.value = hexRef.current;\n        evt.target.blur();\n      }\n    }\n  }))));\n};\n\nReactColorPicker.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.string,\n  showSwatch: PropTypes.bool,\n  showHex: PropTypes.bool,\n  onChange: PropTypes.func,\n  onInteractionStart: PropTypes.func,\n  onInteractionEnd: PropTypes.func\n};\nReactColorPicker.defaultProps = {\n  className: null,\n  color: '#3cd6bf',\n  showSwatch: true,\n  showHex: true,\n  onChange: function onChange() {},\n  onInteractionStart: function onInteractionStart() {},\n  onInteractionEnd: function onInteractionEnd() {}\n};\nexport default ReactColorPicker;","map":{"version":3,"sources":["../node_modules/@super-effective/colorutils/dist/colorutils.es.js","../src/common/util.js","../node_modules/style-inject/dist/style-inject.es.js","../src/ReactColorPicker.js"],"names":["ref","evt","currentTarget","left","element","top","currentElement","percentage","x","hue","Math","percentageX","percentageY","y","saturation","value","ReactColorPicker","className","color","showHex","showSwatch","onChange","onInteractionStart","onInteractionEnd","rest","sanitizedColor","sanitizeHex","hex","setHex","useState","hsv","setHsv","hexToHsv","tempHex","setTempHex","isInteracting","setIsInteracting","hsvRef","useRef","hexRef","hueSliderRef","svSliderRef","setColor","setColorFromHsv","hsvToHex","updatedHsv","setColorFromHex","onHexChange","sanitizedHex","useEffect","updateColor","isRefTargeted","huePosition","getPagePosition","updatedHue","getHueFromPosition","svPosition","updatedSaturationValue","getSaturationValueFromPosition","onMouseDown","onMouseUp","document","hueColor","styles","backgroundColor","details","PropTypes","func"],"mappings":"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","sourcesContent":["/* eslint-disable no-bitwise */\n\n/**\n * @typedef {Object} Rgb\n * @property {number} red - The red component of the color (0 - 255)\n * @property {number} green - The green component of the color (0 - 255)\n * @property {number} blue - The blue component of the color (0 - 255)\n */\n\n/**\n * @typedef {Object} Hsv\n * @property {number} hue - The hue of the color (0 - 360)\n * @property {number} saturation - The saturation the color (0.0 - 1.0)\n * @property {number} value - The value of the color (0.0 - 1.0)\n */\n\n/**\n * Removes invalid characters and formats color hex to 6 characters\n * @param {string} colorHex The color value in hex format to sanitize\n */\nfunction sanitizeHex(colorHex) {\n  var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\n\n  if (sanitizedHex.length === 0) {\n    sanitizedHex = '000000';\n  } else if (sanitizedHex.length === 1) {\n    sanitizedHex = sanitizedHex[0].repeat(6);\n  } else if (sanitizedHex.length === 2) {\n    sanitizedHex = \"\".concat(sanitizedHex[0].repeat(3)).concat(sanitizedHex[1].repeat(3));\n  } else if (sanitizedHex.length >= 3 && sanitizedHex.length < 6) {\n    sanitizedHex = \"\".concat(sanitizedHex[0].repeat(2)).concat(sanitizedHex[1].repeat(2)).concat(sanitizedHex[2].repeat(2));\n  } else if (sanitizedHex.length > 6) {\n    sanitizedHex = sanitizedHex.substr(0, 6);\n  }\n\n  return \"#\".concat(sanitizedHex);\n}\n/**\n * Converts a hex color string to its red, green, and blue component values\n * @param {string} colorHex The color value in hex format\n * @returns {Rgb} The RGB values for the color\n */\n\nfunction hexToRgb(colorHex) {\n  var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\n\n  if (sanitizedHex.length !== 6 && sanitizedHex.length !== 3) {\n    throw new Error(\"Color should be either 3 or 6 characters in length - received a length of \".concat(sanitizedHex.length));\n  }\n\n  if (sanitizedHex.length === 3) {\n    sanitizedHex = \"\".concat(sanitizedHex[0].repeat(2)).concat(sanitizedHex[1].repeat(2)).concat(sanitizedHex[2].repeat(2));\n  }\n\n  var rgb = parseInt(sanitizedHex, 16);\n\n  if (Number.isNaN(rgb)) {\n    throw new Error(\"Unable to parse hex color \".concat(colorHex));\n  }\n\n  var red = rgb >> 16 & 0xff;\n  var green = rgb >> 8 & 0xff;\n  var blue = rgb & 0xff;\n  return {\n    red: red,\n    green: green,\n    blue: blue\n  };\n}\n/**\n * Takes given hue, saturation and value and returns the respective RGB values\n * @param {number} hue The hue of the color (0.0 - 1.0)\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\n * @param {number} value The value of the color (0.0 - 1.0)\n * @returns {Rgb} The RGB values for the color\n */\n\nfunction hsvToRgb(hue, saturation, value) {\n  // Bounds check\n  if (hue < 0 || hue > 360 || saturation < 0 || saturation > 1 || value < 0 || value > 1) {\n    throw new Error('Invalid hue, saturation, or value - all values must be between 0 and 1');\n  }\n\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  var huePercent = hue / 360;\n  var i = Math.floor(huePercent * 6);\n  var f = huePercent * 6 - i;\n  var p = value * (1 - saturation);\n  var q = value * (1 - f * saturation);\n  var t = value * (1 - (1 - f) * saturation);\n\n  switch (i % 6) {\n    case 0:\n      {\n        red = value;\n        green = t;\n        blue = p;\n        break;\n      }\n\n    case 1:\n      {\n        red = q;\n        green = value;\n        blue = p;\n        break;\n      }\n\n    case 2:\n      {\n        red = p;\n        green = value;\n        blue = t;\n        break;\n      }\n\n    case 3:\n      {\n        red = p;\n        green = q;\n        blue = value;\n        break;\n      }\n\n    case 4:\n      {\n        red = t;\n        green = p;\n        blue = value;\n        break;\n      }\n\n    case 5:\n      {\n        red = value;\n        green = p;\n        blue = q;\n        break;\n      }\n  }\n\n  red = Math.round(red * 255);\n  green = Math.round(green * 255);\n  blue = Math.round(blue * 255);\n  return {\n    red: red,\n    green: green,\n    blue: blue\n  };\n}\n/**\n * Converts a hex color string to its hue, saturation, and value\n * @param {string} colorHex The color value in hex format\n * @returns {Hsv} The HSV values for the color\n */\n\nfunction hexToHsv(colorHex) {\n  // Hex validation handled by hexToRgb\n  var _hexToRgb = hexToRgb(colorHex),\n      red = _hexToRgb.red,\n      green = _hexToRgb.green,\n      blue = _hexToRgb.blue;\n\n  var redPercent = red / 255;\n  var greenPercent = green / 255;\n  var bluePercent = blue / 255;\n  var max = Math.max(redPercent, greenPercent, bluePercent);\n  var min = Math.min(redPercent, greenPercent, bluePercent);\n  var diff = max - min;\n  var hue = 0;\n  var saturation = max === 0 ? 0 : diff / max;\n  var value = max;\n\n  if (min === max) ; else {\n    switch (max) {\n      case redPercent:\n        {\n          hue = (greenPercent - bluePercent) / diff + (greenPercent < bluePercent ? 6 : 0);\n          break;\n        }\n\n      case greenPercent:\n        {\n          hue = (bluePercent - redPercent) / diff + 2;\n          break;\n        }\n\n      case bluePercent:\n        {\n          hue = (redPercent - greenPercent) / diff + 4;\n          break;\n        }\n    }\n\n    hue /= 6;\n    hue *= 360;\n  }\n\n  return {\n    hue: hue,\n    saturation: saturation,\n    value: value\n  };\n}\n/**\n * Takes given red, green, and blue values and returns the hex color representation\n * @param {number} red The red component of the color (0 - 255)\n * @param {number} green The green component of the color (0 - 255)\n * @param {number} blue The blue component of the color (0 - 255)\n * @returns {string} The hex string representation of the color\n */\n\nfunction rgbToHex(red, green, blue) {\n  var rgb = blue | green << 8 | red << 16;\n  return \"#\".concat((0x1000000 + rgb).toString(16).slice(1));\n}\n/**\n * Takes given hue, saturation and value and returns the hex color representation\n * @param {number} hue The hue of the color (0.0 - 1.0)\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\n * @param {number} value The value of the color (0.0 - 1.0)\n * @returns {string} The hex string representation of the color\n */\n\nfunction hsvToHex(hue, saturation, value) {\n  // Bounds check handled by hsvToRgb\n  var _hsvToRgb = hsvToRgb(hue, saturation, value),\n      red = _hsvToRgb.red,\n      green = _hsvToRgb.green,\n      blue = _hsvToRgb.blue;\n\n  return rgbToHex(red, green, blue);\n}\n/**\n * Get the perceived brightness of a given color\n * See: https://www.w3.org/TR/AERT/#color-contrast\n * @param {number} red The red component of the color (0 - 255)\n * @param {number} green The green component of the color (0 - 255)\n * @param {number} blue The blue component of the color (0 - 255)\n * @returns {number} The perceived brightness of the color (0.0 - 1.0)\n */\n\nfunction getPerceivedLuminance(red, green, blue) {\n  return (red * 0.299 + green * 0.587 + blue * 0.114) / 255;\n}\n\nexport { getPerceivedLuminance, hexToHsv, hexToRgb, hsvToHex, hsvToRgb, rgbToHex, sanitizeHex };\n//# sourceMappingURL=colorutils.es.js.map\n","/**\n * @typedef {Object} Event\n * @property {Object} target The target element of the event\n */\n\n/**\n * @typedef {Object} Element\n * @property {number} offsetLeft The left offset of the element\n * @property {number} offsetTop The top offset of the element\n * @property {Element} offsetParent The parent element the offset is relative to\n * @property {Element} parentElement The parent element\n */\n\n\n/**\n * Check's if a referenced element is the target or parent of the target of an event\n * @param {Event} target The interaction event\n * @param {Object} ref A ref from a react useRef hook (object with a .current property)\n */\nexport function isRefTargeted(evt, ref) {\n  // Missing ref or event/target\n  if (!ref || !ref.current || !evt || !evt.target) {\n    return false;\n  }\n\n  let currentTarget = evt.target;\n  do {\n    if (currentTarget === ref.current) {\n      return true;\n    }\n    currentTarget = currentTarget.parentElement;\n  } while (currentTarget);\n\n  return false;\n}\n\n/**\n * Gets the page relative top/left position of an element\n * @param {Element} element The DOM element to get the page position of\n */\nexport function getPagePosition(element) {\n  let left = element.offsetLeft;\n  let top = element.offsetTop;\n\n  let currentElement = element;\n  while (currentElement.offsetParent) {\n    currentElement = currentElement.offsetParent;\n\n    left += currentElement.offsetLeft;\n    top += currentElement.offsetTop;\n  }\n\n  return {\n    left,\n    top,\n  };\n}\n\n/**\n * Sanitize and combine classNames to a single string\n * @param  {...string} classNames The classNames to combine\n */\nexport function getCombinedClassNames(...classNames) {\n  // Filter any null values\n  const filteredClassnames = classNames.filter((className) => (\n    typeof className === 'string' && className\n  ));\n\n  return (filteredClassnames.join(' '));\n}\n\n\n/**\n * Get the hue value from a given position on the hue slider\n * @param {number} x The x coordinate on the hue slider\n * @param {number} width The width of the hue slider\n */\nexport function getHueFromPosition(x, width) {\n  if (!width) {\n    return 0;\n  }\n\n  const percentage = x / width;\n  const hue = Math.max(Math.min(percentage, 1), 0) * 360;\n\n  return hue;\n}\n\n/**\n * Get the saturation and value from a given position on the SV slider\n * @param {number} x The x coordinate on the SV selector\n * @param {number} y The y coordinate on the SV selector\n * @param {number} width The width of the SV selector\n * @param {number} height The height of the SV selector\n */\nexport function getSaturationValueFromPosition(x, y, width, height) {\n  const percentageX = (!width) ? 0 : x / width;\n  const percentageY = (!height) ? 0 : 1 - (y / height);\n\n  const saturation = Math.max(Math.min(percentageX, 1), 0);\n  const value = Math.max(Math.min(percentageY, 1), 0);\n\n  return {\n    saturation,\n    value,\n  };\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { hsvToHex, hexToHsv, sanitizeHex } from '@super-effective/colorutils';\n\nimport {\n  getHueFromPosition,\n  getPagePosition,\n  getSaturationValueFromPosition,\n  isRefTargeted,\n} from 'common/util';\n\nimport styles from './ReactColorPicker.module.scss';\n\nconst ReactColorPicker = ({\n  className,\n  color,\n  showHex,\n  showSwatch,\n\n  onChange,\n  onInteractionStart,\n  onInteractionEnd,\n\n  ...rest\n}) => {\n  const sanitizedColor = sanitizeHex(color || '#000000');\n\n  const [hex, setHex] = useState(sanitizedColor);\n  const [hsv, setHsv] = useState(hexToHsv(sanitizedColor));\n\n  // Used when editing the hex through the input\n  const [tempHex, setTempHex] = useState(hex);\n  const [isInteracting, setIsInteracting] = useState(false);\n\n  const hsvRef = useRef(hsv);\n  const hexRef = useRef(hex);\n\n  const hueSliderRef = useRef();\n  const svSliderRef = useRef();\n\n\n  // Set the hex and hsv states/refs with updated data\n  const setColor = (updatedHex, updatedHsv) => {\n    hexRef.current = updatedHex;\n    hsvRef.current = updatedHsv;\n\n    setHex(updatedHex);\n    setTempHex(updatedHex);\n    setHsv(updatedHsv);\n\n    onChange(updatedHex);\n  };\n\n  // Helper to set the color when HSV change\n  const setColorFromHsv = (updatedHsv) => {\n    setColor(\n      hsvToHex(updatedHsv.hue, updatedHsv.saturation, updatedHsv.value),\n      updatedHsv,\n    );\n  };\n\n  // Helper to set the color when hex changes\n  const setColorFromHex = (updatedHex) => {\n    setColor(updatedHex, hexToHsv(updatedHex));\n  };\n\n\n  // Event handler for hex input changes (on blur and enter pressed)\n  const onHexChange = (value) => {\n    // Strip out invalid characters\n    const sanitizedHex = sanitizeHex(value);\n\n    setColorFromHex(sanitizedHex);\n  };\n\n  // Update color when the passed value changes\n  useEffect(() => {\n    if (color !== hexRef.current) {\n      const sanitizedHex = sanitizeHex(color || '#000000');\n      setColorFromHex(sanitizedHex);\n    }\n  }, [color]);\n\n\n  // Hookup cursor events to update the color selection\n  useEffect(() => {\n    const updateColor = (evt) => {\n      // Update hue if targeted\n      if (isRefTargeted(evt, hueSliderRef) && evt.buttons === 1) {\n        const huePosition = getPagePosition(hueSliderRef.current);\n        const x = evt.pageX - huePosition.left;\n\n        const updatedHue = getHueFromPosition(x, hueSliderRef.current.clientWidth);\n\n        setColorFromHsv({ ...hsvRef.current, hue: updatedHue });\n      }\n\n      // Update the saturation/value if targeted\n      if (isRefTargeted(evt, svSliderRef) && evt.buttons === 1) {\n        const svPosition = getPagePosition(svSliderRef.current);\n        const x = evt.pageX - svPosition.left;\n        const y = evt.pageY - svPosition.top;\n\n        const updatedSaturationValue = getSaturationValueFromPosition(\n          x,\n          y,\n          svSliderRef.current.clientWidth,\n          svSliderRef.current.clientHeight,\n        );\n\n        setColorFromHsv({\n          ...hsvRef.current,\n          ...updatedSaturationValue,\n        });\n      }\n    };\n\n    const onMouseDown = (evt) => {\n      if (isRefTargeted(evt, hueSliderRef) || isRefTargeted(evt, svSliderRef)) {\n        setIsInteracting(true);\n        onInteractionStart();\n        updateColor(evt);\n      }\n    };\n\n    const onMouseUp = () => {\n      if (isInteracting) {\n        setIsInteracting(false);\n        onInteractionEnd();\n      }\n    };\n\n    document.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mousemove', updateColor);\n    document.addEventListener('mouseup', onMouseUp);\n\n    return () => {\n      document.removeEventListener('mousedown', onMouseDown);\n      document.removeEventListener('mousemove', updateColor);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [isInteracting]);\n\n  const {\n    hue,\n    saturation,\n    value,\n  } = hsv;\n\n  // Get the hex for the hue slider\n  const hueColor = hsvToHex(hue, 1, 1);\n\n  return (\n    <div\n      className={`${styles.react_color_picker}${className ? ` ${className}` : ''}`}\n      {...rest}\n    >\n      <div\n          className={styles.saturation_value}\n          style={{\n            backgroundColor: hueColor,\n          }}\n          ref={svSliderRef}\n          title=\"Saturation and Value\"\n        >\n          <div\n            className={styles.saturation_value_picker}\n            style={{\n              left: `${saturation * 100}%`,\n              top: `${(1 - value) * 100}%`,\n              backgroundColor: hex,\n            }}\n          />\n        </div>\n\n        <div className={styles.hue_slider} ref={hueSliderRef} title=\"Hue\" >\n          <div\n            className={styles.hue_slider_picker}\n            style={{\n              left: `${(hue / 360) * 100}%`,\n              backgroundColor: hueColor,\n            }}\n          />\n        </div>\n\n        {(showHex || showSwatch) && (\n          <div className={styles.details}>\n            {showSwatch && (\n              <div\n                className={styles.swatch}\n                style={{\n                  backgroundColor: hex,\n                }}\n                title=\"Swatch\"\n              />\n            )}\n            {showHex && (\n              <label>\n                <span>Hex:</span>\n                <input\n                  className={styles.hex_value}\n                  value={tempHex}\n                  onChange={(evt) => setTempHex(evt.target.value)}\n                  onBlur={(evt) => onHexChange(evt.target.value)}\n                  onKeyDown={(evt) => {\n                    if (evt.key === 'Enter') {\n                      onHexChange(evt.target.value);\n                    } else if (evt.key === 'Esc' || evt.key === 'Escape') {\n                      // eslint-disable-next-line no-param-reassign\n                      evt.target.value = hexRef.current;\n                      evt.target.blur();\n                    }\n                  }}\n                />\n              </label>\n            )}\n          </div>\n        )}\n    </div>\n  );\n};\n\nReactColorPicker.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.string,\n  showSwatch: PropTypes.bool,\n  showHex: PropTypes.bool,\n\n  onChange: PropTypes.func,\n  onInteractionStart: PropTypes.func,\n  onInteractionEnd: PropTypes.func,\n};\n\nReactColorPicker.defaultProps = {\n  className: null,\n  color: '#3cd6bf',\n  showSwatch: true,\n  showHex: true,\n\n  onChange: () => {},\n  onInteractionStart: () => {},\n  onInteractionEnd: () => {},\n};\n\nexport default ReactColorPicker;\n"]},"metadata":{},"sourceType":"module"}