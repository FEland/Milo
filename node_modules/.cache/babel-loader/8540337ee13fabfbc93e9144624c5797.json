{"ast":null,"code":"import _slicedToArray from \"/Users/femac2/Desktop/milo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/femac2/Desktop/milo/src/ColorModal.js\";\nimport React, { useState } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport ReactColorPicker from '@super-effective/react-color-picker'; //https://github.com/super-effective/react-color-picker\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormatColorTextIcon from '@material-ui/icons/FormatColorText';\nimport IconButton from \"@material-ui/core/Button\"; // import { visitFunctionBody } from 'typescript';\n// import ColorLensTwoToneIcon from '@material-ui/icons/ColorLensTwoTone';\n// import debounce from 'lodash';\n// import throttle from 'lodash';\n\nfunction throttle2(func, limit) {\n  var wait = false; // Initially, we're not waiting\n\n  return function () {\n    // We return a throttled function\n    if (!wait) {\n      // If we're not waiting\n      func.apply(this, arguments);\n      wait = true; // Prevent future invocations\n\n      setTimeout(function () {\n        // After a period of time\n        wait = false; // And allow future invocations\n      }, limit);\n    }\n  };\n}\n\nexport default function ColorModal(_ref) {\n  var callBack = _ref.callBack;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var handleOpen = function handleOpen() {\n    setOpen(true);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  var _useState = useState('white'),\n      _useState2 = _slicedToArray(_useState, 2),\n      color = _useState2[0],\n      setColor = _useState2[1]; // const onChangeDebounced = (updatedColor) => {\n  //   // console.log(\"joa\");\n  //   return throttle(() => {\n  //     console.log(\"here\");\n  //     // setColor(updatedColor);\n  //     // callBack(updatedColor);\n  //   }, 100);\n  // }\n  //einstein92 post on 8/3/2020 in Discord Channel\n  // function throttle( fn, par, wait ){\n  //     let lastCall = 0;\n  //     if( Date.now() - lastCall > wait  ){\n  //         console.log(\"23kjo2\");\n  //         lastCall = Date.now()\n  //         fn(par)\n  //       }\n  // }\n  // const throttle = (func, limit) => {\n  //   let flag = true;\n  //   return function(){\n  //     let context = this;\n  //     let args = arguments;\n  //     if (flag) {\n  //       visitFunctionBody.apply(context, args);\n  //       flag = false;\n  //       setTimeout( () => {flag = true}, limit);\n  //     }\n  //   }\n  // }\n  // function throttle2(func, timeFrame) {\n  //   var lastTime = 0;\n  //   return function () {\n  //       var now = new Date();\n  //       if (now - lastTime >= timeFrame) {\n  //           func.apply(this, arguments);\n  //           lastTime = now;\n  //       }\n  //   };\n  // }\n\n\n  function handleColor(newColor) {\n    callBack(newColor);\n    setColor(newColor);\n  }\n\n  var onColorChange = function onColorChange(updatedColor) {\n    // setColor(updatedColor);\n    // handleColor(updatedColor);\n    throttle2(handleColor(updatedColor), 200); // throttle2(callBack(updatedColor), 100);\n    // throttle(handleColor, updatedColor, 200);\n    // debounce();\n    // onChangeDebounced(updatedColor);\n    // _debounce(onChangeDebounced, 2000);\n    // setColor(updatedColor);\n    // callBack(updatedColor);\n    // return throttle(() => {\n    //   setColor(updatedColor);\n    //   callBack(updatedColor);\n    // }, 200);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Adjust Text Color\",\n    arrow: true,\n    placement: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    backgroundColor: \"rgb(151, 155, 137)\",\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormatColorTextIcon, {\n    style: {\n      color: color\n    },\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 16\n    }\n  }))), /*#__PURE__*/React.createElement(Modal, {\n    open: open,\n    onClose: handleClose,\n    style: {\n      \"width\": \"215px\",\n      \"height\": \"215px\",\n      \"margin\": \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ReactColorPicker, {\n    style: {\n      \"width\": \"200px\",\n      \"height\": \"200px\",\n      \"padding\": \"15px 5px\",\n      \"border\": \"1px solid #ccc\",\n      \"borderRadius\": \"10px\",\n      \"backgroundColor\": 'rgb(151, 155, 137)'\n    },\n    showHex: false,\n    showSwatch: false,\n    color: color,\n    onChange: onColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 19\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/femac2/Desktop/milo/src/ColorModal.js"],"names":["React","useState","Modal","ReactColorPicker","Tooltip","FormatColorTextIcon","IconButton","throttle2","func","limit","wait","apply","arguments","setTimeout","ColorModal","callBack","open","setOpen","handleOpen","handleClose","color","setColor","handleColor","newColor","onColorChange","updatedColor"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport ReactColorPicker from '@super-effective/react-color-picker'; //https://github.com/super-effective/react-color-picker\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormatColorTextIcon from '@material-ui/icons/FormatColorText';\nimport IconButton from \"@material-ui/core/Button\";\n// import { visitFunctionBody } from 'typescript';\n// import ColorLensTwoToneIcon from '@material-ui/icons/ColorLensTwoTone';\n// import debounce from 'lodash';\n// import throttle from 'lodash';\n\n\n\nfunction throttle2 (func, limit) {\n  var wait = false;                  // Initially, we're not waiting\n  return function () {  \n    // We return a throttled function\n      if (!wait) {                   // If we're not waiting\n          func.apply(this, arguments);\n          wait = true;               // Prevent future invocations\n          setTimeout(function () {   // After a period of time\n              wait = false;          // And allow future invocations\n          }, limit);\n      }\n  }\n\n}\n\nexport default function ColorModal({callBack}) {\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [color, setColor] = useState('white');\n  \n  // const onChangeDebounced = (updatedColor) => {\n  //   // console.log(\"joa\");\n  //   return throttle(() => {\n  //     console.log(\"here\");\n  //     // setColor(updatedColor);\n  //     // callBack(updatedColor);\n  //   }, 100);\n  // }\n\n//einstein92 post on 8/3/2020 in Discord Channel\n  // function throttle( fn, par, wait ){\n  //     let lastCall = 0;\n      \n  //     if( Date.now() - lastCall > wait  ){\n  //         console.log(\"23kjo2\");\n  //         lastCall = Date.now()\n  //         fn(par)\n  //       }\n  // }\n\n  // const throttle = (func, limit) => {\n  //   let flag = true;\n  //   return function(){\n  //     let context = this;\n  //     let args = arguments;\n  //     if (flag) {\n  //       visitFunctionBody.apply(context, args);\n  //       flag = false;\n  //       setTimeout( () => {flag = true}, limit);\n  //     }\n  //   }\n  // }\n\n  // function throttle2(func, timeFrame) {\n  //   var lastTime = 0;\n\n  //   return function () {\n  //       var now = new Date();\n  //       if (now - lastTime >= timeFrame) {\n  //           func.apply(this, arguments);\n  //           lastTime = now;\n  //       }\n  //   };\n  // }\n\n\n\n  function handleColor(newColor){\n    callBack(newColor);\n    setColor(newColor);\n  }\n\n  const onColorChange = (updatedColor) => {\n    // setColor(updatedColor);\n    // handleColor(updatedColor);\n    throttle2(handleColor(updatedColor), 200);\n\n    // throttle2(callBack(updatedColor), 100);\n    // throttle(handleColor, updatedColor, 200);\n    // debounce();\n    // onChangeDebounced(updatedColor);\n    // _debounce(onChangeDebounced, 2000);\n    // setColor(updatedColor);\n    // callBack(updatedColor);\n\n    // return throttle(() => {\n    //   setColor(updatedColor);\n    //   callBack(updatedColor);\n    // }, 200);\n  }\n\n  \n  return (\n    <>\n      <Tooltip title=\"Adjust Text Color\" arrow placement=\"right\">\n\n        <IconButton backgroundColor= 'rgb(151, 155, 137)' onClick={handleOpen}> \n               {/* <ColorLensTwoToneIcon  style={{color: color}} fontSize=\"large\"/>  */}\n               <FormatColorTextIcon  style={{color: color}} fontSize=\"large\"/> \n\n          </IconButton>\n      </Tooltip> \n        <Modal open={open} onClose={handleClose} style = {{ \"width\" : \"215px\", \"height\" : \"215px\", \"margin\" : \"auto\"}}>\n\n                  <ReactColorPicker style = {{\"width\" : \"200px\", \"height\" : \"200px\",\n                                              \"padding\" : \"15px 5px\", \"border\" : \"1px solid #ccc\",\n                                              \"borderRadius\" : \"10px\", \"backgroundColor\": 'rgb(151, 155, 137)',\n                                              }}\n                      showHex = {false} showSwatch = {false}\n                      color={color} onChange={onColorChange} \n                  />\n        </Modal>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}